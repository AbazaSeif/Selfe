<?php

if (getcwd() == dirname(__FILE__)) {
    require '../System/ErrorPage.php';
    die(ShowError());
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of UserMangment
 *
 * @author abaza
 */
class UserMangment {

    var $UUID = null;
    var $Multimedia = null;

    function __set($name, $class) {
        if (is_null($name)) {
            if (class_exists($class)) {
                $name = new $class;
                return $name;
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    function __construct() {

        $this->UUID = (is_null($this->UUID = self::__set($this->UUID, UUID)) ? die(ShowError()) : $this->UUID);
        $this->Multimedia = (is_null($this->Multimedia = self::__set($this->Multimedia, Maltimedia_module)) ? die(ShowError()) : $this->Multimedia);
    }

    function __destruct() {
        unset($this->UUID);
        unset($this->Multimedia);
    }

    public function setNotification($From, $To, $Action, $Label) {
        $Serial = $this->UUID->generate_license();
        $Data = array(
            FILED_NOTIFICATIONS_FROM => $From,
            FILED_NOTIFICATIONS_TO => $To,
            FILED_NOTIFICATIONS_DATE => $GLOBALS[CLASS_TOOLS]->getToday(),
            FILED_NOTIFICATIONS_ACTION => $Action,
            FILED_NOTIFICATIONS_ISNEW => ON,
            FILED_NOTIFICATIONS_LABEL => $Label,
            FILED_NOTIFICATIONS_SERIAL => $Serial
        );

        $Notifcation = $GLOBALS[CLASS_TOOLS]->removeNull($Data);
        if (!is_null($Notifcation)) {
            $GLOBALS[CLASS_DATABASE]->insert(TABLE_NOTIFICATIONS, $Notifcation);
            return $Serial;
        } else {
            return null;
        }
    }

    public function getNotification() {
        $Retern = array();

        $tmpData = array(
            FILED_NOTIFICATIONS_TO => $GLOBALS[CLASS_FILTER]->FilterData(KEY_NOTIFICATIONS_TO),
            FILED_NOTIFICATIONS_SERIAL => $GLOBALS[CLASS_FILTER]->FilterData(KEY_NOTIFICATIONS_SERIAL),
            FILED_NOTIFICATIONS_ISNEW => ON
        );

        $Data = $GLOBALS[CLASS_TOOLS]->removeNull($tmpData);
        if (!is_null($Data)) {
            $FilteringArray = $GLOBALS[CLASS_DATABASE]->select(TABLE_NOTIFICATIONS, $Data);
            if (count($FilteringArray) > 0) {
                foreach ($FilteringArray as $element) {
                    $element = $GLOBALS[CLASS_TOOLS]->RemoveKeyInArray(FILED_NOTIFICATIONS_ACTION, $element);
                    $element = $GLOBALS[CLASS_TOOLS]->RemoveKeyInArray(FILED_NOTIFICATIONS_ID, $element);
                    $element = $GLOBALS[CLASS_TOOLS]->RemoveKeyInArray(FILED_NOTIFICATIONS_ISNEW, $element);
                    $element = $GLOBALS[CLASS_TOOLS]->RemoveKeyInArray(FILED_NOTIFICATIONS_TO, $element);
                    array_push($Retern, $element);
                }

                //Make all New Notification is old
                $Update = array(
                    FILED_NOTIFICATIONS_TO => $GLOBALS[CLASS_FILTER]->FilterData(KEY_NOTIFICATIONS_TO),
                    FILED_NOTIFICATIONS_ISNEW => OFF
                );
                $GLOBALS[CLASS_DATABASE]->update(TABLE_NOTIFICATIONS, $Update, $Data);
                return $Retern;
            } else {
                return NO_NEW;
            }
        }
    }

    public function isThisUserExist($User) {
        $UserCheck1 = array(
            FILED_USER_ID => $User
        );
        return $GLOBALS[CLASS_DATABASE]->isExist(TABLE_USER, $UserCheck1);
    }

    public function WhoIs($ID, $Filed = null) {
        if (isset($ID)) {
            $Data = array(
                FILED_USER_ID => $ID
            );

            $tmp = $GLOBALS[CLASS_DATABASE]->select(TABLE_USER, $Data);
            $User = $GLOBALS[CLASS_TOOLS]->removeNull($tmp);
            if (!is_null($User)) {
                if (is_null($Filed)) {
                    return $User;
                } else {
                    return $User[$Filed];
                }
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    public function Get_User_Information($User_ID = null) {
        $UserID = null;
        if (isset($User_ID)) {
            $UserID = array(
                FILED_UID => $User_ID
            );
        } else {
            $UserID = array(
                FILED_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_UID)
            );
        }

        $Main = array(
            FILED_USER_ID => $UserID[FILED_UID]
        );


        $UserID = $GLOBALS[CLASS_TOOLS]->removeNull($UserID);
        if (is_null($UserID)) {
            die(ShowError());
        } else {
            $UserData = array(
                $GLOBALS[CLASS_DATABASE]->select(TABLE_USER, $Main),
                $GLOBALS[CLASS_DATABASE]->select(TABLE_PHONE, $UserID),
                $GLOBALS[CLASS_DATABASE]->select(TABLE_USER_STOCK, $UserID),
                $GLOBALS[CLASS_DATABASE]->select(TABLE_USER_GIFT, $UserID),
                $GLOBALS[CLASS_DATABASE]->select(TABLE_MESSAGE, $UserID),
                $GLOBALS[CLASS_DATABASE]->select(TABLE_FRIENDS, $UserID),
            );

            $UserInfo = $GLOBALS[CLASS_TOOLS]->removeNull($UserData);

            return $UserInfo;
        }
    }

    public function Get_User_Albume() {
        $UserUID = array();
        $Images = array();
        $Commands = array();
        $RetarnImage = array();

        $temp = array(
            FILED_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_UID)
        );

        $UserUID = $GLOBALS[CLASS_TOOLS]->removeNull($temp);
        if (!is_null($UserUID)) {
            $Images = $GLOBALS[CLASS_DATABASE]->select(TABLE_USER_PHOTO, $UserUID);
        }
        if (!is_null($Images)) {
            if (is_array($Images)) {
                foreach ($Images as $RecImage) {
                    $ID = $RecImage[FILED_USER_PHOTO_ID];
                    $ImagePath = $RecImage[FILED_USER_PHOTO_PHOTO_PATH];
                    $RecImage[FILED_USER_PHOTO_PHOTO_PATH] = $this->Multimedia->Send_Image_User($ImagePath, PHOTO);
                    $ImageCommand = array(FILED_USER_PHOTO_COMMENT_UPID => $ID);
                    $Commands = $GLOBALS[CLASS_DATABASE]->select(TABLE_USER_PHOTO_COMMENT, $ImageCommand);
                    $Commands = $GLOBALS[CLASS_TOOLS]->removeNull($Commands);
                    $element = array(
                        [$RecImage, $Commands]
                    );
                    if (is_null($Commands)) {
                        array_push($RetarnImage, $RecImage);
                    } else {
                        array_push($RetarnImage, $element);
                    }
                }
                return $RetarnImage;
            }
        } else {
            return NO_NEW;
        }
    }

    public function Set_Comment_in_photo() {
        $Image = array();
        $ImageTemp = array(
            FILED_USER_PHOTO_COMMENT_FROM => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_FROM),
            FILED_USER_PHOTO_COMMENT_UPID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_UPID),
            FILED_USER_PHOTO_COMMENT_COMMENT => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_COMMENT),
            FILED_USER_PHOTO_COMMENT_DATE => $GLOBALS[CLASS_TOOLS]->getToday(),
            FILED_USER_PHOTO_COMMENT_LIKE => 0,
            FILED_USER_PHOTO_COMMENT_UNLIKE => 0
        );

        $Image = $GLOBALS[CLASS_TOOLS]->removeNull($ImageTemp);

        if (!is_null($Image)) {
            if (empty($Image[FILED_USER_PHOTO_COMMENT_COMMENT]) || strlen($Image[FILED_USER_PHOTO_COMMENT_COMMENT]) == 0) {
                $GLOBALS[CLASS_TOOLS]->System_Log("ERROR : Comment is Empty !!!", __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL . FILED_USER_PHOTO_COMMENT_COMMENT;
            }
            if (empty($Image[FILED_USER_PHOTO_COMMENT_UPID])) {
                $GLOBALS[CLASS_TOOLS]->System_Log("ERROR : Not found UPID ?", __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL . FILED_USER_PHOTO_COMMENT_UPID;
            }

            if ($GLOBALS[CLASS_DATABASE]->insert(TABLE_USER_PHOTO_COMMENT, $Image)) {
                $Comment_ID = $GLOBALS[CLASS_DATABASE]->lastInsertID();
                $GLOBALS[CLASS_TOOLS]->System_Log("Insert new comment to image " . $Image[FILED_USER_PHOTO_COMMENT_UPID] . " is DONE.", __FUNCTION__, __LINE__, Tools::SUCCESS);

                $Name = $this->WhoIs($Image[FILED_USER_PHOTO_COMMENT_FROM]);
                $SerialNumber = $this->setNotification($Image[FILED_USER_PHOTO_COMMENT_FROM], $Name[FILED_USER_ID], NOTIF_COMMENT, sprintf(LABEL_USER_COMMENT, $Name[FILED_USER_NAME]));

                $Retern = array(
                    KEY_USER_PHOTO_COMMENT_ID => $Comment_ID,
                    KEY_NOTIFICATIONS_SERIAL => (is_null($SerialNumber) ? "NULL" : $SerialNumber)
                );

                return $Retern;
            }
        } else {
            $GLOBALS[CLASS_TOOLS]->System_Log("No Data is set .... i think it is Attack", __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL . SET_COMMENT_IN_PHOTO;
        }
    }

    public function Edit_Comment_in_Photo() {
        $Image = array();
        $Where = array(
            FILED_USER_PHOTO_COMMENT_ID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_ID)
        );
        $ImageTemp = array(
            FILED_USER_PHOTO_COMMENT_FROM => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_FROM),
            FILED_USER_PHOTO_COMMENT_UPID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_UPID),
            FILED_USER_PHOTO_COMMENT_COMMENT => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_COMMENT),
            FILED_USER_PHOTO_COMMENT_DATE => $GLOBALS[CLASS_TOOLS]->getToday(),
            FILED_USER_PHOTO_COMMENT_LIKE => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_LIKE),
            FILED_USER_PHOTO_COMMENT_UNLIKE => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_UNLIKE)
        );

        $Image = $GLOBALS[CLASS_TOOLS]->removeNull($ImageTemp);

        if (!is_null($Image)) {
            if (empty($Image[FILED_USER_PHOTO_COMMENT_COMMENT]) || strlen($Image[FILED_USER_PHOTO_COMMENT_COMMENT]) == 0) {
                $GLOBALS[CLASS_TOOLS]->System_Log("ERROR : Comment is Empty !!!", __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL . FILED_USER_PHOTO_COMMENT_COMMENT;
            }
            if (empty($Image[FILED_USER_PHOTO_COMMENT_UPID])) {
                $GLOBALS[CLASS_TOOLS]->System_Log("ERROR : Not found UPID ?", __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL . FILED_USER_PHOTO_COMMENT_UPID;
            }

            if ($GLOBALS[CLASS_DATABASE]->update(TABLE_USER_PHOTO_COMMENT, $Image, $Where)) {
                $Comment_ID = $Where[FILED_USER_PHOTO_COMMENT_ID];
                $GLOBALS[CLASS_TOOLS]->System_Log("Insert new comment to image " . $Image[FILED_USER_PHOTO_COMMENT_UPID] . " is DONE.", __FUNCTION__, __LINE__, Tools::SUCCESS);

                $Name = $this->WhoIs($Image[FILED_USER_PHOTO_COMMENT_FROM]);
                $SerialNumber = $this->setNotification($Image[FILED_USER_PHOTO_COMMENT_FROM], $Name[FILED_USER_ID], NOTIF_COMMENT, sprintf(LABEL_USER_COMMENT, $Name[FILED_USER_NAME]));

                $Retern = array(
                    KEY_USER_PHOTO_COMMENT_ID => $Comment_ID,
                    KEY_NOTIFICATIONS_SERIAL => (is_null($SerialNumber) ? "NULL" : $SerialNumber)
                );

                return $Retern;
            }
        } else {
            $GLOBALS[CLASS_TOOLS]->System_Log("No Data is set .... i think it is Attack", __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL . SET_COMMENT_IN_PHOTO;
        }
    }

    public function Delet_Comment_in_Photo() {
        $Where = array(
            FILED_USER_PHOTO_COMMENT_ID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_PHOTO_COMMENT_ID)
        );

        $Where = $GLOBALS[CLASS_TOOLS]->removeNull($Where);

        if (!is_null($Where)) {
            if ($GLOBALS[CLASS_DATABASE]->delete(TABLE_USER_PHOTO_COMMENT, $Where)) {
                $GLOBALS[CLASS_TOOLS]->System_Log("Done Delete Comment " . $Where[FILED_USER_PHOTO_COMMENT_ID], __FUNCTION__, __LINE__, Tools::SUCCESS);
                return SUCCESS;
            } else {
                $GLOBALS[CLASS_TOOLS]->System_Log("Can not Delete Comment " . $Where[FILED_USER_PHOTO_COMMENT_ID] . " MYSQL ERROR : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL;
            }
        } else {
            $GLOBALS[CLASS_TOOLS]->System_Log("Not Found ID For Delete Comment!!", __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL . KEY_USER_PHOTO_COMMENT_ID;
        }
    }

    public function Change_Status_Line() {
        $Where = array(
            FILED_USER_ONLINE_ID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_ONLINE_ID)
        );
        $Data = array(
            FILED_USER_ONLINE_ID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_ONLINE_ID),
            FILED_USER_ONLINE_STATUS => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_ONLINE_STATUS),
            FILED_USER_ONLINE_WHAT_IS_IN_YOUR_MIND => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_ONLINE_WHAT_IS_IN_YOUR_MIND)
        );
        $Database = $GLOBALS[CLASS_DATABASE]->select(TABLE_USER_ONLINE, $Where);
        if (is_null($Database)) {
            //Insert
            if ($GLOBALS[CLASS_DATABASE]->insert(TABLE_USER_ONLINE, $Data)) {
                return SUCCESS;
            } else {
                $GLOBALS[CLASS_TOOLS]->System_Log("Filed to Insert data in MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL;
            }
        } else {
            //Update
            if ($GLOBALS[CLASS_DATABASE]->update(TABLE_USER_ONLINE, $Data, $Where)) {
                return SUCCESS;
            } else {
                $GLOBALS[CLASS_TOOLS]->System_Log("Filed to Update data in MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL;
            }
        }
    }

    public function Set_Friend() {
        $Data = array(
            FILED_FRIENDS_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_UID),
            FILED_FRIENDS_FRIEND => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_FRIEND),
            FILED_FRIENDS_DATE => $GLOBALS[CLASS_TOOLS]->getToday(),
            FILED_FRIENDS_FAVORIT => OFF
        );

        $Check = array(
            FILED_FRIENDS_UID => $Data[FILED_FRIENDS_UID],
            FILED_FRIENDS_FRIEND => $Data[FILED_FRIENDS_FRIEND]
        );
        $ORCheck = array(
            FILED_FRIENDS_FRIEND => $Data[FILED_FRIENDS_UID],
            FILED_FRIENDS_UID => $Data[FILED_FRIENDS_FRIEND]
        );

        if ($Check[FILED_FRIENDS_UID] == $Check[FILED_FRIENDS_FRIEND]) {
            return FAIL;
        }

        if (($GLOBALS[CLASS_DATABASE]->isExist(TABLE_FRIENDS, $Check)) || ($GLOBALS[CLASS_DATABASE]->isExist(TABLE_FRIENDS, $ORCheck))) {
            return FAIL;
        }

        if (!$this->isThisUserExist($Data[FILED_FRIENDS_UID])) {
            return FAIL;
        }
        if (!$this->isThisUserExist($Data[FILED_FRIENDS_FRIEND])) {
            return FAIL;
        }

        if ($GLOBALS[CLASS_DATABASE]->insert(TABLE_FRIENDS, $Data)) {
            $GLOBALS[CLASS_TOOLS]->System_Log("Friend Relationshep is Creating Done", __FUNCTION__, __LINE__, Tools::SUCCESS);
            return SUCCESS;
        } else {
            $GLOBALS[CLASS_TOOLS]->System_Log("ERROR : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL;
        }
    }

    public function Set_Unfriend() {
        $Data = array(
            FILED_FRIENDS_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_UID),
            FILED_FRIENDS_FRIEND => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_FRIEND)
        );

        $Check = array(
            FILED_FRIENDS_UID => $Data[FILED_FRIENDS_UID],
            FILED_FRIENDS_FRIEND => $Data[FILED_FRIENDS_FRIEND]
        );
        $ORCheck = array(
            FILED_FRIENDS_FRIEND => $Data[FILED_FRIENDS_UID],
            FILED_FRIENDS_UID => $Data[FILED_FRIENDS_FRIEND]
        );

        if ($Check[FILED_FRIENDS_UID] == $Check[FILED_FRIENDS_FRIEND]) {
            return FAIL;
        }

        if (!$this->isThisUserExist($Data[FILED_FRIENDS_UID])) {
            return FAIL;
        }
        if (!$this->isThisUserExist($Data[FILED_FRIENDS_FRIEND])) {
            return FAIL;
        }

        if ($GLOBALS[CLASS_DATABASE]->delete(TABLE_FRIENDS, $Data)) {
            if ($GLOBALS[CLASS_DATABASE]->isExist(TABLE_FRIENDS, $ORCheck)) {
                if ($GLOBALS[CLASS_DATABASE]->delete(TABLE_FRIENDS, $ORCheck)) {
                    return SUCCESS;
                } else {
                    $GLOBALS[CLASS_TOOLS]->System_Log("ERROR can not Delete . MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                    return FAIL;
                }
            } else {
                return SUCCESS;
            }
        } else {
            $GLOBALS[CLASS_TOOLS]->System_Log("ERROR can not Delete . MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL;
        }
    }

    public function Set_Friend_Favorit() {
        $Where = array(
            FILED_FRIENDS_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_UID),
            FILED_FRIENDS_FRIEND => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_FRIEND)
        );
        $Data = array(
            FILED_FRIENDS_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_UID),
            FILED_FRIENDS_FRIEND => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_FRIEND),
            FILED_FRIENDS_FAVORIT => ON
        );

        if (!$this->isThisUserExist($Data[FILED_FRIENDS_UID])) {
            return FAIL;
        }
        if (!$this->isThisUserExist($Data[FILED_FRIENDS_FRIEND])) {
            return FAIL;
        }

        if ($GLOBALS[CLASS_DATABASE]->isExist(TABLE_FRIENDS, $Where)) {
            if ($GLOBALS[CLASS_DATABASE]->update(TABLE_FRIENDS, $Data, $Where)) {
                return SUCCESS;
            } else {
                $GLOBALS[CLASS_TOOLS]->System_Log("ERROR can not Update user favorit . MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL;
            }
        } else {
            $GLOBALS[CLASS_TOOLS]->System_Log("ERROR : User try to Update favorit but he is not his friend", __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL;
        }
    }

    public function Set_Friend_Unfavorit() {
        $Where = array(
            FILED_FRIENDS_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_UID),
            FILED_FRIENDS_FRIEND => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_FRIEND)
        );
        $Data = array(
            FILED_FRIENDS_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_UID),
            FILED_FRIENDS_FRIEND => $GLOBALS[CLASS_FILTER]->FilterData(KEY_FRIENDS_FRIEND),
            FILED_FRIENDS_FAVORIT => OFF
        );

        if (!$this->isThisUserExist($Data[FILED_FRIENDS_UID])) {
            return FAIL;
        }
        if (!$this->isThisUserExist($Data[FILED_FRIENDS_FRIEND])) {
            return FAIL;
        }

        if ($GLOBALS[CLASS_DATABASE]->isExist(TABLE_FRIENDS, $Where)) {
            if ($GLOBALS[CLASS_DATABASE]->update(TABLE_FRIENDS, $Data, $Where)) {
                return SUCCESS;
            } else {
                $GLOBALS[CLASS_TOOLS]->System_Log("ERROR can not Update user favorit . MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL;
            }
        } else {
            $GLOBALS[CLASS_TOOLS]->System_Log("ERROR : User try to Update favorit but he is not his friend", __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL;
        }
    }

    public function Set_Ponans_For_User() {
        $where = array(FILED_USER_POINT_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_POINT_UID));
        $Data = array(
            FILED_USER_POINT_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_POINT_UID),
            FILED_USER_POINT_POINT_STOCK => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_POINT_POINT_STOCK),
            FILED_USER_POINT_DATE_CHARGE_POINT => $GLOBALS[CLASS_TOOLS]->getToday(),
            FILED_USER_POINT_FROM => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_POINT_FROM)
        );

        $Data = $GLOBALS[CLASS_TOOLS]->removeNull($Data);
        if (!$GLOBALS[CLASS_TOOLS]->isKeyExists(FILED_USER_POINT_UID, $Data)) {
            $GLOBALS[CLASS_TOOLS]->System_Log("Not found User ID", __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL;
        }

        if (!$this->isThisUserExist($Data[FILED_USER_POINT_UID])) {
            return FAIL;
        }

        if ($GLOBALS[CLASS_DATABASE]->isExist(TABLE_USER_POINT, $where)) {
            if ($GLOBALS[CLASS_DATABASE]->update(TABLE_USER_POINT, $Data, $where)) {
                return SUCCESS;
            } else {
                $GLOBALS[CLASS_TOOLS]->System_Log("Can not Set ponans to table . MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL;
            }
        } else {
            if ($GLOBALS[CLASS_DATABASE]->insert(TABLE_USER_POINT, $Data)) {
                return SUCCESS;
            } else {
                $GLOBALS[CLASS_TOOLS]->System_Log("Can not Set ponans to table . MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL;
            }
        }
    }

    public function Get_Ponans_For_User() {
        $where = array(FILED_USER_POINT_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_USER_POINT_UID));
        $where = $GLOBALS[CLASS_TOOLS]->removeNull($where);
        if ($GLOBALS[CLASS_TOOLS]->isKeyExists(FILED_USER_POINT_UID, $where)) {
            if (!$this->isThisUserExist($where[FILED_USER_POINT_UID])) {
                return FAIL;
            }
            $Retern = $GLOBALS[CLASS_DATABASE]->select(TABLE_USER_POINT, $where);
            if (!is_null($Retern)) {
                $Retern = $GLOBALS[CLASS_TOOLS]->RemoveKeyInArray(FILED_USER_POINT_UID, $Retern);
                return $Retern;
            } else {
                $GLOBALS[CLASS_TOOLS]->System_Log("Can not Get ponans from table . MySQL : " . $GLOBALS[CLASS_DATABASE]->ReturnError(), __FUNCTION__, __LINE__, Tools::ERROR);
                return FAIL;
            }
        } else {
            $GLOBALS[CLASS_TOOLS]->System_Log("Not found User ID", __FUNCTION__, __LINE__, Tools::ERROR);
            return FAIL;
        }
    }

    public function Calculat_Total_Of_Ponans_User($User_ID = null) {
        $Like = 0;
        $Unlike = 0;

        $TableArray = array(
            TABLE_USER_PHOTO => array(FILED_USER_PHOTO_TIME_OF_LIKE, FILED_USER_PHOTO_TIME_OF_UNLIKE),
            TABLE_USER_VIDEO => array(FILED_USER_VIDEO_TIME_OF_LIKE, FILED_USER_VIDEO_TIME_OF_UNLIKE),
        );

        $Data = array();
        if (is_null($User_ID)) {
            $Data = array(
                FILED_UID => $GLOBALS[CLASS_FILTER]->FilterData(KEY_UID)
            );
        } else {
            $Data = array(
                FILED_UID => $User_ID
            );
        }
        $Keys = $GLOBALS[CLASS_TOOLS]->GetKeys($TableArray);

        for ($i = 0; $i <= count($Keys) - 1; $i++) {
            $User = $GLOBALS[CLASS_DATABASE]->select($Keys[$i], $Data);
            if (!is_null($User)) {
                foreach ($User as $element) {
                    $tempL = $element[$TableArray[$Keys[$i]][0]];
                    $tempU = $element[$TableArray[$Keys[$i]][1]];
                    $Like += (int) $tempL;
                    $Unlike +=(int) $tempU;
                }
            }

            //Set Ponans for User
        }
    }

}
