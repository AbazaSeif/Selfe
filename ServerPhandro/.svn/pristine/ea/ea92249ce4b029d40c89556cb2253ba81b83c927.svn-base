<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of Syncronization
 * This Class for Sync Profile User
 * @author Seif Abaza
 */
class Syncronization {

    private $User_ID = 0;

    private function getID() {
        $IMEIData = [FILED_PHONE_IMEI => $GLOBALS[CLASS_FILTER]->FilterData(KEY_PHONE_IMEI)];
        $IMEIData = $GLOBALS[CLASS_TOOLS]->removeNull($IMEIData);
        $IMEI = $GLOBALS[CLASS_DATABASE]->select(TABLE_PHONE, $IMEIData);
        if (is_null($IMEI)) {
            return null;
        } else {
            $this->User_ID = intval($IMEI[FILED_PHONE_UID]);
            if ($this->User_ID == 0) {
                return null;
            }
            return $this->User_ID;
        }
    }

    public function SyncAll() {
        $this->getID();
    }

    public function SyncMessage() {
        $this->getID();
        $MessageClass = new Message_Class();

        $Message1 = $MessageClass->get_new_message($this->User_ID);
        $Message2 = $MessageClass->get_new_message('', $this->User_ID);
        if (($Message1 == FAIL) || ($Message1 == NO_NEW)) {
            $Message1 = null;
        }
        if (($Message2 == FAIL) || ($Message2 == NO_NEW)) {
            $Message2 = null;
        }
        if ((!is_null($Message1)) && (!is_null($Message2))) {
            return array_merge($Message1, $Message2);
        } elseif ((!is_null($Message1)) && (is_null($Message2))) {
            return $Message1;
        } elseif ((is_null($Message1)) && (!is_null($Message2))) {
            return $Message2;
        } elseif ((is_null($Message1)) && (is_null($Message2))) {
            return NO_NEW;
        }
    }

    public function SyncNews() {
        $this->getID();
    }

    public function SyncNotification() {
        $this->getID();
    }

    public function SyncFriend() {
        $this->getID();
    }

    public function SyncPonans() {
        $this->getID();
    }

    public function SyncStock() {
        $this->getID();
    }

    public function SyncComment() {
        $this->getID();
    }

    public function SyncGifts() {
        $this->getID();
    }

    public function SyncCountrys() {
        $BufferCountry = $GLOBALS[CLASS_TOOLS]->removeNull($GLOBALS[CLASS_DATABASE]->select(TABLE_COUNTRY));
        foreach ($BufferCountry as $Country) {
            $CountNetwork = $GLOBALS[CLASS_DATABASE]->countRows(TABLE_MOBILE_NETWORK, [FILED_MOBILE_NETWORK_COUNTRY_NAME => $Country[FILED_COUNTRY_NAME]], true);
            $Country = $GLOBALS[CLASS_TOOLS]->ChangeValueInArray(FILED_COUNTRY_NUMBER_OF_NETWORK, $CountNetwork, $Country);
            $GLOBALS[CLASS_DATABASE]->update(TABLE_COUNTRY, [FILED_COUNTRY_NUMBER_OF_NETWORK => $CountNetwork], [FILED_COUNTRY_ID => $Country[FILED_COUNTRY_ID]]);
        }
    }

    public function SyncMemberInCountry() {
        $INCRIMENT_AFTER = intval(SystemVariable(FILED_SYSTEM_INCRIMENT_PRICE_AFTER));
        $INCRIMENT_PRICE = intval(SystemVariable(FILED_SYSTEM_INCRIMENT_PRICE));
        $BufferMember = $GLOBALS[CLASS_TOOLS]->removeNull($GLOBALS[CLASS_DATABASE]->select(TABLE_COUNTRY));
        foreach ($BufferMember as $Member) {
            $CountMember = $GLOBALS[CLASS_DATABASE]->countRows(TABLE_PHONE, [FILED_PHONE_COUNTRY => $Member[FILED_COUNTRY_ID]]);
            if ($CountMember >= $INCRIMENT_AFTER) {
                $Price = $Member[FILED_COUNTRY_PRICE] + $INCRIMENT_PRICE;
                $GLOBALS[CLASS_DATABASE]->update(TABLE_COUNTRY, [FILED_COUNTRY_MEMBERS => $CountMember, FILED_COUNTRY_PRICE => $Price], [FILED_COUNTRY_ID => $Member[FILED_COUNTRY_ID]]);
            } else {
                $GLOBALS[CLASS_DATABASE]->update(TABLE_COUNTRY, [FILED_COUNTRY_MEMBERS => $CountMember], [FILED_COUNTRY_ID => $Member[FILED_COUNTRY_ID]]);
            }
        }
    }

}
