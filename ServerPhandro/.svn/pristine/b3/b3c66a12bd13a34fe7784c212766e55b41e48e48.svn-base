<?php

if (getcwd() == dirname(__FILE__)) {
    require '../System/ErrorPage.php';
    die(ShowError());
}
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * Description of Tools
 *
 * @author abaza
 */
class Tools {

    const SUCCESS = 1; // 0001
    const NOTICE = 2; // 0010
    const RETERN = 4; // 0100
    const ERROR = 8; // 1000

    protected $DebugMode = false;

    /**
     * message levels
     *
     * @var array
     */
    static public $level = array(
        Tools::SUCCESS => 'success',
        Tools::NOTICE => 'notice',
        Tools::RETERN => 'retern',
        Tools::ERROR => 'error',
    );

    function __construct() {
        if (getcwd() == dirname(__FILE__)) {
            die(ShowError());
        }
    }

    public function getToday() {
        return date('d-m-Y');
    }

    public function getTime() {
        return date('H:i:s');
    }

    public function GetKeys($Array) {
        $ArrayKeys = array_keys($Array);
        return $ArrayKeys;
    }

    public function isKeyExists($Key, $Array) {
        if (array_key_exists($Key, $Array)) {
            return true;
        } else {
            return false;
        }
    }

    public function getValue($Key, $Array) {
        foreach ($Array as $key => $value) {
            if ($key == $Key) {
                return $value;
            }
        }
        return NULL;
    }

    public function isClassExist($Class) {
        if (class_exists($Class)) {
            return true;
        } else {
            $this->System_Log("Can not found Class " . $Class, __FUNCTION__, __LINE__, self::ERROR);
            die(ShowError());
        }
    }

    public function isFunctionExist($Function) {
        if (function_exists($Function)) {
            return true;
        } else {
            $this->System_Log("Can not found Function " . $Function, __FUNCTION__, __LINE__, self::ERROR);
            die(ShowError());
        }
    }

    public function removeNull($Array) {
        $FilterData = array();
        if (!is_null($Array)) {
            foreach ($Array as $key => $value) {
                if (!is_null($value) || !empty($value)) {
                    $FilterData[$key] = $value;
                }
            }
            if (count($FilterData) > 0) {
                return $FilterData;
            } else {
                return NULL;
            }
        } else {
            return NULL;
        }
    }

    public function ChangeValueInArray($Key, $New_Value, $Array) {
        $NewArray = null;

        foreach ($Array as $key => $value) {
            if ($key == $Key) {
                $NewArray[$key] = $New_Value;
            } else {
                $NewArray[$key] = $value;
            }
        }
        return $NewArray;
    }

    public function RemoveKeyInArray($Key, $Array) {
        $NewArray = null;

        foreach ($Array as $key => $value) {
            if ($key != $Key) {
                $NewArray[$key] = $value;
            }
        }
        return $NewArray;
    }

    public function ShowDie($Message) {
        $this->Show($Message);
    }

    public function Show($Message) {
        echo $Message . '<br>';
    }

    public function ShowBuffer($Message) {
        if (ENCRIPTION_BUFFER) {
            if (is_array($Message)) {
                $MessageEnc = array();
                foreach ($Message as $Key => $Value) {
                    $MessageEnc[$Key] = md5($Value);
                }
            } else {
                $MessageEnc = '';
                $MessageEnc = md5($Message);
            }
            $this->System_Log($Message, __FUNCTION__, __LINE__, self::RETERN);
            print json_encode($MessageEnc);
        } else {
            $this->System_Log($Message, __FUNCTION__, __LINE__, self::RETERN);
            print json_encode($Message);
        }
    }

    public function setDebug($debug) {
        $this->DebugMode = $debug;
    }

    public function isDebug() {
        return $this->DebugMode;
    }

    public function generateRandomString($length = 10) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    public function HeaderDebug() {
        if ($this->DebugMode) {
            $ip = filter_input(INPUT_SERVER, 'REMOTE_ADDR');
            $url = $_SERVER['REQUEST_URI'];
            if ($this->DebugMode) {
                printf('<br><b>IP Address </b>: %s', $ip);
                printf('<br><b>URL </b>: %s <br><ul>', $url);
            }
        }
    }

    public function Count_Debug_time() {
        try {
            $fp = fopen(SYSTEM_FILE_TIME_FOR_DEBUG, "a");

            $count = fgets($fp, 1024);

            $cnew = $count + 1;
            $countnew = fputs($fp, $count + 1);
            fclose($fp);
            return $cnew;
        } catch (Exception $error) {
            $this->System_Log($error, __FUNCTION__, __LINE__);
            return 0;
        }
    }

    public function Serial_Number_Implimntation($Serial) {
        $Len = strlen($Serial);
        if ($Len == 16) {
            return $Serial;
        } else {
            return null;
        }
    }

    public function System_Log($Echo, $Function, $Line, $level = null, $WithRequest = false) {
        $myfile = null;
        if (is_null($level)) {
            $level = self::$level[Tools::NOTICE];
        } else {
            $level = self::$level[$level];
        }

        if (LOG_SYSTEM) {
            $Time = $this->getTime();
            $Date = $this->getToday();
            $ip = filter_input(INPUT_SERVER, 'REMOTE_ADDR');
            $url = $_SERVER['REQUEST_URI'];

            $bro = $_SERVER['HTTP_USER_AGENT'];
            $re = print_r($_REQUEST, true);

            $Message = null;
            $LogSystem = array();

            if (is_array($Echo)) {
                $Result = print_r($Echo, true);
                if ($WithRequest) {
                    $Message = $level . ' ( ' . $Time . ' | ' . $Date . ' )( ' . $ip . ' ) (' . $Function . ') (' . $Line . ') Array : [' . $Result . '].  URL : ' . $url . '. Request : ' . $re . PHP_EOL;
                } else {
                    $Message = $level . ' ( ' . $Time . ' | ' . $Date . ' )( ' . $ip . ' ) (' . $Function . ') (' . $Line . ') Array : [' . $Result . '].  URL : ' . $url . '.' . PHP_EOL;
                }
                $LogSystem = array(
                    FILED_SYSTEM_LOG_DATE => $Time . " | " . $Date,
                    FILED_SYSTEM_LOG_ACTION => $Function . " Line : " . $Line,
                    FILED_SYSTEM_LOG_INFO => $Result,
                    FILED_SYSTEM_LOG_IP_CLIENT => $ip,
                    FILED_SYSTEM_LOG_REQUEST => $re,
                    FILED_SYSTEM_LOG_LEVEL => $level
                );
            } else {
                if ($WithRequest) {
                    $Message = $level . ' ( ' . $Time . ' | ' . $Date . ' )( ' . $ip . ' ) (' . $Function . ') (' . $Line . ') Message : ' . $Echo . '. URL : ' . $url . '. Request : ' . $re . PHP_EOL;
                } else {
                    $Message = $level . ' ( ' . $Time . ' | ' . $Date . ' )( ' . $ip . ' ) ( ' . $Function . ') (' . $Line . ') Message : ' . $Echo . '. URL : ' . $url . '.' . PHP_EOL;
                }
                $LogSystem = array(
                    FILED_SYSTEM_LOG_DATE => $Time . " | " . $Date,
                    FILED_SYSTEM_LOG_ACTION => $Function . " Line : " . $Line,
                    FILED_SYSTEM_LOG_INFO => $Echo,
                    FILED_SYSTEM_LOG_IP_CLIENT => $ip,
                    FILED_SYSTEM_LOG_REQUEST => $re,
                    FILED_SYSTEM_LOG_LEVEL => $level
                );
            }

            $LogSystem = $this->removeNull($LogSystem);

            try {
                $myfile = fopen(SYSTEM_FILE_LOG, 'a');
                if ($myfile != false) {
                    fwrite($myfile, $Message);
                    fflush($myfile);
                    fclose($myfile);
                }
            } catch (Exception $error) {
                chmod($myfile, 0777);
            } finally {
                unset($myfile);
            }
            //Save in database 
            if (!$GLOBALS[CLASS_DATABASE]->insert(TABLE_SYSTEM_LOG, $LogSystem)) {
                try {
                    $myfile = fopen(DATABASE_LOG, 'a');
                    if ($myfile != false) {
                        fwrite($myfile, "ERROR #:" . mysql_errno() . " Message " . mysql_error() . PHP_EOL);
                        fflush($myfile);
                        fclose($myfile);
                    }
                } catch (Exception $error) {
                    chmod($myfile, 0777);
                } finally {
                    unset($myfile);
                }
            }
        }
    }

}
